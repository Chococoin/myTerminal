"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var test_utils_1 = require("react-dom/test-utils");
var server_1 = require("react-dom/server");
var _1 = require(".");
describe("react free style", function () {
    it("should render using hooks", function () {
        var useStyles = _1.createStyles({
            text: {
                backgroundColor: "red"
            }
        }, {
            "*": {
                boxSizing: "border-box"
            }
        });
        var App = function () {
            var styles = useStyles();
            return React.createElement("div", { className: styles.text }, "Hello world!");
        };
        var renderer = new _1.MemoryRenderer();
        expect(server_1.renderToStaticMarkup(React.createElement(_1.Context.Provider, { value: renderer },
            React.createElement(App, null)))).toEqual("<div class=\"" + useStyles.styles.text + "\">Hello world!</div>");
        var expectedCss = "." + useStyles.styles.text + "{background-color:red}*{box-sizing:border-box}";
        expect(renderer.toCss()).toEqual(expectedCss);
        expect(renderer.toString()).toEqual("<style id=\"" + _1.STYLE_ID + "\">" + expectedCss + "</style>");
    });
    it("should support styled components", function () {
        var Button = _1.styled("button", {
            color: "red"
        });
        expect(server_1.renderToStaticMarkup(React.createElement(Button, null))).toEqual("<button class=\"" + Button.styles.style + "\"></button>");
        expect(server_1.renderToStaticMarkup(React.createElement(Button, null, "Hello world!"))).toEqual("<button class=\"" + Button.styles.style + "\">Hello world!</button>");
        expect(server_1.renderToStaticMarkup(React.createElement(Button, null,
            React.createElement("i", { className: "test" }),
            " Hello world!"))).toEqual("<button class=\"" + Button.styles.style + "\"><i class=\"test\"></i> Hello world!</button>");
        expect(server_1.renderToStaticMarkup(React.createElement(Button, { className: "test" }, "Text"))).toEqual("<button class=\"" + Button.styles.style + " test\">Text</button>");
    });
    it("should correctly forward refs", function () {
        var ref = React.createRef();
        var Button = _1.styled("button", {});
        test_utils_1.renderIntoDocument(React.createElement(Button, { ref: ref }, "Test"));
        expect(ref.current).not.toBeNull();
    });
});
//# sourceMappingURL=index.spec.js.map