"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var FreeStyle = require("free-style");
exports.FreeStyle = FreeStyle;
var helpers = require("style-helper");
exports.helpers = helpers;
/**
 * Tag the element for rendering later.
 */
exports.STYLE_ID = "__react_free_style__";
/**
 * Basic `noop` renderer. Used as the default context for testing.
 */
var NoopRenderer = /** @class */ (function () {
    function NoopRenderer() {
    }
    NoopRenderer.prototype.merge = function (freeStyle) {
        return; // Do nothing.
    };
    NoopRenderer.prototype.unmerge = function (freeStyle) {
        return; // Do nothing.
    };
    NoopRenderer.prototype.toCss = function () {
        return "";
    };
    NoopRenderer.prototype.toString = function () {
        return "<style id=\"" + exports.STYLE_ID + "\">" + this.toCss() + "</style>";
    };
    NoopRenderer.prototype.toComponent = function () {
        return React.createElement("style", {
            id: exports.STYLE_ID,
            dangerouslySetInnerHTML: { __html: this.toCss() }
        });
    };
    return NoopRenderer;
}());
exports.NoopRenderer = NoopRenderer;
/**
 * In-memory renderer. Used for server-side rendering.
 */
var MemoryRenderer = /** @class */ (function (_super) {
    __extends(MemoryRenderer, _super);
    function MemoryRenderer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.freeStyle = FreeStyle.create();
        return _this;
    }
    MemoryRenderer.prototype.merge = function (freeStyle) {
        this.freeStyle.merge(freeStyle);
    };
    MemoryRenderer.prototype.unmerge = function (freeStyle) {
        this.freeStyle.unmerge(freeStyle);
    };
    MemoryRenderer.prototype.toCss = function () {
        return this.freeStyle.getStyles();
    };
    return MemoryRenderer;
}(NoopRenderer));
exports.MemoryRenderer = MemoryRenderer;
/**
 * DOM style sheet renderer. Used for front-end applications.
 */
var StyleSheetRenderer = /** @class */ (function (_super) {
    __extends(StyleSheetRenderer, _super);
    function StyleSheetRenderer() {
        var _this = _super.call(this) || this;
        var element = document.getElementById(exports.STYLE_ID);
        var styleSheet;
        if (!element) {
            element = document.createElement("style");
            element.setAttribute("id", exports.STYLE_ID);
            element.setAttribute("type", "text/css");
            document.head.appendChild(element);
        }
        for (var i = 0; i < document.styleSheets.length; i++) {
            var item = document.styleSheets.item(i);
            if (item.ownerNode === element) {
                styleSheet = item;
                break;
            }
        }
        _this.freeStyle = FreeStyle.create(undefined, undefined, {
            add: function (style, index) {
                styleSheet.insertRule(style.getStyles(), index);
            },
            remove: function (style, index) {
                styleSheet.deleteRule(index);
            },
            change: function (style, oldIndex, newIndex) {
                styleSheet.deleteRule(oldIndex);
                styleSheet.insertRule(style.getStyles(), newIndex);
            }
        });
        return _this;
    }
    return StyleSheetRenderer;
}(MemoryRenderer));
exports.StyleSheetRenderer = StyleSheetRenderer;
/**
 * Export default React.js context object with `noop` behavior.
 */
exports.Context = React.createContext(new NoopRenderer());
/**
 * Create a pre-computed `useStyles` hook for React.
 */
function createStyles(sheet, css, hash, debug) {
    if (sheet === void 0) { sheet = {}; }
    var Style = FreeStyle.create(hash, debug);
    var styles = helpers.registerStyleSheet(Style, sheet, css);
    return Object.assign(function useStyles() {
        useStyle(Style); // Automatically use "own styles".
        return styles;
    }, { styles: styles });
}
exports.createStyles = createStyles;
/**
 * Dynamically register other `FreeStyle` instance.
 */
function useStyle(Style) {
    var context = React.useContext(exports.Context);
    // Unmount styles automatically.
    React.useEffect(function () { return function () { return context.unmerge(Style); }; });
    // Mount styles automatically.
    context.merge(Style);
    return Style;
}
exports.useStyle = useStyle;
/**
 * Type-safe styled component.
 */
function styled(type, style) {
    var useStyle = createStyles({ style: style });
    return Object.assign(React.forwardRef(function Component(props, ref) {
        var style = useStyle().style;
        var className = props.className ? style + " " + props.className : style;
        return React.createElement(type, __assign({}, props, { ref: ref, className: className }));
    }), {
        styles: useStyle.styles,
        displayName: "Styled<" + type + ">"
    });
}
exports.styled = styled;
//# sourceMappingURL=index.js.map