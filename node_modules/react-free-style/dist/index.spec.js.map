{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.tsx"],"names":[],"mappings":";;AAAA,6BAA+B;AAC/B,mDAA0D;AAC1D,2CAAwD;AACxD,sBAA4E;AAE5E,QAAQ,CAAC,kBAAkB,EAAE;IAC3B,EAAE,CAAC,2BAA2B,EAAE;QAC9B,IAAM,SAAS,GAAG,eAAY,CAC5B;YACE,IAAI,EAAE;gBACJ,eAAe,EAAE,KAAK;aACvB;SACF,EACD;YACE,GAAG,EAAE;gBACH,SAAS,EAAE,YAAY;aACxB;SACF,CACF,CAAC;QAEF,IAAM,GAAG,GAAG;YACV,IAAM,MAAM,GAAG,SAAS,EAAE,CAAC;YAE3B,OAAO,6BAAK,SAAS,EAAE,MAAM,CAAC,IAAI,mBAAoB,CAAC;QACzD,CAAC,CAAC;QAEF,IAAM,QAAQ,GAAG,IAAI,iBAAc,EAAE,CAAC;QAEtC,MAAM,CACJ,6BAAoB,CAClB,oBAAC,UAAO,CAAC,QAAQ,IAAC,KAAK,EAAE,QAAQ;YAC/B,oBAAC,GAAG,OAAG,CACU,CACpB,CACF,CAAC,OAAO,CAAC,kBAAe,SAAS,CAAC,MAAM,CAAC,IAAI,0BAAsB,CAAC,CAAC;QAEtE,IAAM,WAAW,GAAG,MAClB,SAAS,CAAC,MAAM,CAAC,IAAI,mDACyB,CAAC;QAEjD,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC9C,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACjC,iBAAc,WAAQ,WAAK,WAAW,aAAU,CACjD,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;QACrC,IAAM,MAAM,GAAG,SAAM,CAAC,QAAQ,EAAE;YAC9B,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QAEH,MAAM,CAAC,6BAAoB,CAAC,oBAAC,MAAM,OAAG,CAAC,CAAC,CAAC,OAAO,CAC9C,qBAAkB,MAAM,CAAC,MAAM,CAAC,KAAK,iBAAa,CACnD,CAAC;QAEF,MAAM,CAAC,6BAAoB,CAAC,oBAAC,MAAM,uBAAsB,CAAC,CAAC,CAAC,OAAO,CACjE,qBAAkB,MAAM,CAAC,MAAM,CAAC,KAAK,6BAAyB,CAC/D,CAAC;QAEF,MAAM,CACJ,6BAAoB,CAClB,oBAAC,MAAM;YACL,2BAAG,SAAS,EAAC,MAAM,GAAG;4BACf,CACV,CACF,CAAC,OAAO,CACP,qBACE,MAAM,CAAC,MAAM,CAAC,KAAK,oDACyB,CAC/C,CAAC;QAEF,MAAM,CACJ,6BAAoB,CAAC,oBAAC,MAAM,IAAC,SAAS,EAAC,MAAM,WAAc,CAAC,CAC7D,CAAC,OAAO,CAAC,qBAAkB,MAAM,CAAC,MAAM,CAAC,KAAK,0BAAsB,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE;QAClC,IAAM,GAAG,GAAG,KAAK,CAAC,SAAS,EAAqB,CAAC;QACjD,IAAM,MAAM,GAAG,SAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAEpC,+BAAkB,CAAC,oBAAC,MAAM,IAAC,GAAG,EAAE,GAAG,WAAe,CAAC,CAAC;QAEpD,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as React from \"react\";\nimport { renderIntoDocument } from \"react-dom/test-utils\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { createStyles, MemoryRenderer, Context, STYLE_ID, styled } from \".\";\n\ndescribe(\"react free style\", () => {\n  it(\"should render using hooks\", () => {\n    const useStyles = createStyles(\n      {\n        text: {\n          backgroundColor: \"red\"\n        }\n      },\n      {\n        \"*\": {\n          boxSizing: \"border-box\"\n        }\n      }\n    );\n\n    const App = () => {\n      const styles = useStyles();\n\n      return <div className={styles.text}>Hello world!</div>;\n    };\n\n    const renderer = new MemoryRenderer();\n\n    expect(\n      renderToStaticMarkup(\n        <Context.Provider value={renderer}>\n          <App />\n        </Context.Provider>\n      )\n    ).toEqual(`<div class=\"${useStyles.styles.text}\">Hello world!</div>`);\n\n    const expectedCss = `.${\n      useStyles.styles.text\n    }{background-color:red}*{box-sizing:border-box}`;\n\n    expect(renderer.toCss()).toEqual(expectedCss);\n    expect(renderer.toString()).toEqual(\n      `<style id=\"${STYLE_ID}\">${expectedCss}</style>`\n    );\n  });\n\n  it(\"should support styled components\", () => {\n    const Button = styled(\"button\", {\n      color: \"red\"\n    });\n\n    expect(renderToStaticMarkup(<Button />)).toEqual(\n      `<button class=\"${Button.styles.style}\"></button>`\n    );\n\n    expect(renderToStaticMarkup(<Button>Hello world!</Button>)).toEqual(\n      `<button class=\"${Button.styles.style}\">Hello world!</button>`\n    );\n\n    expect(\n      renderToStaticMarkup(\n        <Button>\n          <i className=\"test\" /> Hello world!\n        </Button>\n      )\n    ).toEqual(\n      `<button class=\"${\n        Button.styles.style\n      }\"><i class=\"test\"></i> Hello world!</button>`\n    );\n\n    expect(\n      renderToStaticMarkup(<Button className=\"test\">Text</Button>)\n    ).toEqual(`<button class=\"${Button.styles.style} test\">Text</button>`);\n  });\n\n  it(\"should correctly forward refs\", () => {\n    const ref = React.createRef<HTMLButtonElement>();\n    const Button = styled(\"button\", {});\n\n    renderIntoDocument(<Button ref={ref}>Test</Button>);\n\n    expect(ref.current).not.toBeNull();\n  });\n});\n"]}