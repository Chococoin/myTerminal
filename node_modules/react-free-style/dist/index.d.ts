import * as React from "react";
import * as FreeStyle from "free-style";
import * as helpers from "style-helper";
/**
 * Re-export the `free-style` module.
 */
export { FreeStyle, helpers };
/**
 * Tag the element for rendering later.
 */
export declare const STYLE_ID = "__react_free_style__";
/**
 * Basic `noop` renderer. Used as the default context for testing.
 */
export declare class NoopRenderer {
    merge(freeStyle: FreeStyle.FreeStyle): void;
    unmerge(freeStyle: FreeStyle.FreeStyle): void;
    toCss(): string;
    toString(): string;
    toComponent(): React.DetailedReactHTMLElement<{
        id: string;
        dangerouslySetInnerHTML: {
            __html: string;
        };
    }, HTMLElement>;
}
/**
 * In-memory renderer. Used for server-side rendering.
 */
export declare class MemoryRenderer extends NoopRenderer {
    freeStyle: FreeStyle.FreeStyle;
    merge(freeStyle: FreeStyle.FreeStyle): void;
    unmerge(freeStyle: FreeStyle.FreeStyle): void;
    toCss(): string;
}
/**
 * DOM style sheet renderer. Used for front-end applications.
 */
export declare class StyleSheetRenderer extends MemoryRenderer {
    constructor();
}
/**
 * Export default React.js context object with `noop` behavior.
 */
export declare const Context: React.Context<NoopRenderer>;
/**
 * Create a pre-computed `useStyles` hook for React.
 */
export declare function createStyles<T extends string>(sheet?: helpers.StyleSheet<T>, css?: helpers.StyleValue, hash?: FreeStyle.HashFunction, debug?: boolean): (() => Record<T, string>) & {
    styles: Record<T, string>;
};
/**
 * Dynamically register other `FreeStyle` instance.
 */
export declare function useStyle<T extends FreeStyle.FreeStyle>(Style: T): T;
/**
 * Type-safe styled component.
 */
export declare function styled<T extends keyof JSX.IntrinsicElements & (keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap)>(type: T, style: helpers.StyleValue): React.ForwardRefExoticComponent<React.PropsWithoutRef<JSX.IntrinsicElements[T]> & React.RefAttributes<(HTMLElementTagNameMap & SVGElementTagNameMap)[T]>> & {
    styles: Record<"style", string>;
    displayName: string;
};
