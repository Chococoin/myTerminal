{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { create } from 'free-style'\nimport { quote, url, objectify, merge, registerStyleSheet, StyleSheetRegistry } from './index'\n\ndescribe('style helper', () => {\n  it('should quote a string', () => {\n    expect(quote('testing')).toEqual('\"testing\"')\n    expect(quote('\"')).toEqual('\"\\\\\"\"')\n  })\n\n  it('should handle urls', () => {\n    expect(url('/path.png')).toEqual('url(\"/path.png\")')\n  })\n\n  it('should turn styles into an object', () => {\n    expect(objectify([['padding', 10]])).toEqual({\n      padding: 10\n    })\n  })\n\n  it('should support objectifying keys as arrays', () => {\n    const key = ['.a', '.b']\n\n    expect(objectify([[key, { margin: 10 }]])).toEqual({\n      '.a': { margin: 10 },\n      '.b': { margin: 10 }\n    })\n  })\n\n  it('should merge css object together', () => {\n    expect(merge(\n      {\n        margin: 5,\n        padding: 10\n      },\n      {\n        '@media print': {\n          margin: 0,\n          padding: 0\n        }\n      },\n      {\n        '@media print': {\n          padding: 5\n        }\n      }\n    )).toEqual({\n      margin: 5,\n      padding: 10,\n      '@media print': {\n        margin: 0,\n        padding: 5\n      }\n    })\n  })\n\n  it('should register style sheets', () => {\n    const Style = create()\n\n    const styles = registerStyleSheet(Style, {\n      button: {\n        color: 'red'\n      }\n    }, {\n      html: {\n        margin: 0\n      }\n    })\n\n    expect(Object.keys(styles)).toEqual(['button'])\n    expect(Style.getStyles()).toEqual(`.${styles.button}{color:red}html{margin:0}`)\n  })\n\n  it('should register style sheets with functions', () => {\n    const Style = create()\n    let keyframesHash: string | undefined\n\n    const styles = registerStyleSheet(Style, {\n      link: {\n        color: 'red'\n      },\n      input: () => ({\n        color: 'green'\n      }),\n      button: (registry: StyleSheetRegistry) => {\n        keyframesHash = registry.registerKeyframes({\n          from: { color: 'red' },\n          to: { color: 'blue' }\n        })\n\n        return {\n          animation: `${keyframesHash} 1s infinite`\n        }\n      }\n    })\n\n    expect(Object.keys(styles)).toEqual(['link', 'input', 'button'])\n\n    expect(Style.getStyles()).toEqual(\n      `.${styles.link}{color:red}.${styles.input}{color:green}` +\n      `@keyframes ${keyframesHash}{from{color:red}to{color:blue}}` +\n      `.${styles.button}{animation:${keyframesHash} 1s infinite}`\n    )\n  })\n})\n"]}