import { PropertiesFallback } from 'csstype';
/**
 * Typed style object.
 *
 * Based on https://github.com/typestyle/typestyle/pull/245/files
 */
export interface Style extends PropertiesFallback<string | number> {
    /** State selector */
    '&:active'?: Style;
    '&:any'?: Style;
    '&:checked'?: Style;
    '&:default'?: Style;
    '&:disabled'?: Style;
    '&:empty'?: Style;
    '&:enabled'?: Style;
    '&:first'?: Style;
    '&:first-child'?: Style;
    '&:first-of-type'?: Style;
    '&:fullscreen'?: Style;
    '&:focus'?: Style;
    '&:hover'?: Style;
    '&:indeterminate'?: Style;
    '&:in-range'?: Style;
    '&:invalid'?: Style;
    '&:last-child'?: Style;
    '&:last-of-type'?: Style;
    '&:left'?: Style;
    '&:link'?: Style;
    '&:only-child'?: Style;
    '&:only-of-type'?: Style;
    '&:optional'?: Style;
    '&:out-of-range'?: Style;
    '&:read-only'?: Style;
    '&:read-write'?: Style;
    '&:required'?: Style;
    '&:right'?: Style;
    '&:root'?: Style;
    '&:scope'?: Style;
    '&:target'?: Style;
    '&:valid'?: Style;
    '&:visited'?: Style;
    /**
     * Pseudo-elements
     * https://developer.mozilla.org/en/docs/Web/CSS/Pseudo-elements
     */
    '&::after'?: Style;
    '&::before'?: Style;
    '&::first-letter'?: Style;
    '&::first-line'?: Style;
    '&::selection'?: Style;
    '&::backdrop'?: Style;
    '&::placeholder'?: Style;
    '&::marker'?: Style;
    '&::spelling-error'?: Style;
    '&::grammar-error'?: Style;
    /** Children */
    '&>*'?: Style;
    /**
     * Mobile first media query example
     */
    '@media screen and (min-width: 700px)'?: Style;
    /**
     * Desktop first media query example
     */
    '@media screen and (max-width: 700px)'?: Style;
    [selector: string]: string | number | (string | number)[] | Style | undefined;
}
/**
 * Escape a string for use in double quotes.
 */
export declare function escape(value: string): string;
/**
 * Quote a string for use in CSS.
 */
export declare function quote(value: string): string;
/**
 * Wrap a string in a CSS `url()` function.
 */
export declare function url(value: string): string;
/**
 * Turn a list of styles into an object.
 */
export declare function objectify<T extends keyof Style>(styles: Array<[T | T[], Style[T]]>): Pick<Style, T>;
/**
 * Check if an object looks like a style.
 */
export declare function isStyle(value: any): value is Style;
/**
 * Merge a list of styles together.
 */
export declare function merge(...styles: Style[]): Style;
/**
 * Style sheet compatible object.
 */
export interface Registry {
    registerStyle(style: Style, displayName?: string): string;
    registerKeyframes(style: Style, displayName?: string): string;
    registerHashRule(prefix: string, style: Style, displayName?: string): string;
    registerRule(rule: string, style: Style): void;
    registerCss(style: Style): void;
}
/**
 * Internal registry wrapper.
 */
export declare class StyleSheetRegistry implements Registry {
    registry: Registry;
    prefix: string;
    constructor(registry: Registry, prefix: string);
    registerStyle(style: Style, key?: string): string;
    registerKeyframes(style: Style, key?: string): string;
    registerHashRule(rule: string, style: Style, key?: string): string;
    registerRule(rule: string, style: Style): void;
    registerCss(style: Style): void;
}
/**
 * Types allowed for style objects.
 */
export declare type StyleValue = ((registry: StyleSheetRegistry) => Style) | Style;
/**
 * Input object for registering a style sheet.
 */
export declare type StyleSheet<T extends string> = Record<T, StyleValue>;
/**
 * Register a style sheet object with support for functions.
 */
export declare function registerStyleSheet<S extends string>(Style: Registry, sheet?: {
    [K in S]: StyleValue;
}, css?: StyleValue, registeredName?: string): Record<S, string>;
