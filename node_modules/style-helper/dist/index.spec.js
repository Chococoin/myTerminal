"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var free_style_1 = require("free-style");
var index_1 = require("./index");
describe('style helper', function () {
    it('should quote a string', function () {
        expect(index_1.quote('testing')).toEqual('"testing"');
        expect(index_1.quote('"')).toEqual('"\\""');
    });
    it('should handle urls', function () {
        expect(index_1.url('/path.png')).toEqual('url("/path.png")');
    });
    it('should turn styles into an object', function () {
        expect(index_1.objectify([['padding', 10]])).toEqual({
            padding: 10
        });
    });
    it('should support objectifying keys as arrays', function () {
        var key = ['.a', '.b'];
        expect(index_1.objectify([[key, { margin: 10 }]])).toEqual({
            '.a': { margin: 10 },
            '.b': { margin: 10 }
        });
    });
    it('should merge css object together', function () {
        expect(index_1.merge({
            margin: 5,
            padding: 10
        }, {
            '@media print': {
                margin: 0,
                padding: 0
            }
        }, {
            '@media print': {
                padding: 5
            }
        })).toEqual({
            margin: 5,
            padding: 10,
            '@media print': {
                margin: 0,
                padding: 5
            }
        });
    });
    it('should register style sheets', function () {
        var Style = free_style_1.create();
        var styles = index_1.registerStyleSheet(Style, {
            button: {
                color: 'red'
            }
        }, {
            html: {
                margin: 0
            }
        });
        expect(Object.keys(styles)).toEqual(['button']);
        expect(Style.getStyles()).toEqual("." + styles.button + "{color:red}html{margin:0}");
    });
    it('should register style sheets with functions', function () {
        var Style = free_style_1.create();
        var keyframesHash;
        var styles = index_1.registerStyleSheet(Style, {
            link: {
                color: 'red'
            },
            input: function () { return ({
                color: 'green'
            }); },
            button: function (registry) {
                keyframesHash = registry.registerKeyframes({
                    from: { color: 'red' },
                    to: { color: 'blue' }
                });
                return {
                    animation: keyframesHash + " 1s infinite"
                };
            }
        });
        expect(Object.keys(styles)).toEqual(['link', 'input', 'button']);
        expect(Style.getStyles()).toEqual("." + styles.link + "{color:red}." + styles.input + "{color:green}" +
            ("@keyframes " + keyframesHash + "{from{color:red}to{color:blue}}") +
            ("." + styles.button + "{animation:" + keyframesHash + " 1s infinite}"));
    });
});
//# sourceMappingURL=index.spec.js.map