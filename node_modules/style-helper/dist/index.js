"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ESCAPES = {
    '"': '\\"',
    '\\': '\\\\',
    '\n': '\\A'
};
var ESCAPE_REGEXP = new RegExp("[" + Object.keys(ESCAPES).join('|') + "]", 'g');
/**
 * Escape a string for use in double quotes.
 */
function escape(value) {
    return value.replace(ESCAPE_REGEXP, function (x) { return ESCAPES[x]; });
}
exports.escape = escape;
/**
 * Quote a string for use in CSS.
 */
function quote(value) {
    return "\"" + escape(value) + "\"";
}
exports.quote = quote;
/**
 * Wrap a string in a CSS `url()` function.
 */
function url(value) {
    return "url(" + quote(value) + ")";
}
exports.url = url;
/**
 * Turn a list of styles into an object.
 */
function objectify(styles) {
    var obj = Object.create(null);
    for (var _i = 0, styles_1 = styles; _i < styles_1.length; _i++) {
        var _a = styles_1[_i], key = _a[0], value = _a[1];
        if (Array.isArray(key)) {
            for (var _b = 0, key_1 = key; _b < key_1.length; _b++) {
                var k = key_1[_b];
                obj[k] = value;
            }
        }
        else {
            obj[key] = value;
        }
    }
    return obj;
}
exports.objectify = objectify;
/**
 * Check if an object looks like a style.
 */
function isStyle(value) {
    return value !== null && typeof value === 'object' && !Array.isArray(value);
}
exports.isStyle = isStyle;
/**
 * Merge a list of styles together.
 */
function merge() {
    var styles = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        styles[_i] = arguments[_i];
    }
    var result = Object.create(null);
    for (var _a = 0, styles_2 = styles; _a < styles_2.length; _a++) {
        var style = styles_2[_a];
        for (var _b = 0, _c = Object.keys(style); _b < _c.length; _b++) {
            var key = _c[_b];
            var value = style[key];
            if (isStyle(value) && isStyle(result[key])) {
                result[key] = merge(result[key], value);
            }
            else {
                result[key] = value;
            }
        }
    }
    return result;
}
exports.merge = merge;
/**
 * Internal registry wrapper.
 */
var StyleSheetRegistry = /** @class */ (function () {
    function StyleSheetRegistry(registry, prefix) {
        this.registry = registry;
        this.prefix = prefix;
    }
    StyleSheetRegistry.prototype.registerStyle = function (style, key) {
        if (key === void 0) { key = ''; }
        return this.registry.registerStyle(style, this.prefix + key);
    };
    StyleSheetRegistry.prototype.registerKeyframes = function (style, key) {
        if (key === void 0) { key = ''; }
        return this.registry.registerKeyframes(style, key);
    };
    StyleSheetRegistry.prototype.registerHashRule = function (rule, style, key) {
        if (key === void 0) { key = ''; }
        return this.registry.registerHashRule(rule, style, this.prefix + key);
    };
    StyleSheetRegistry.prototype.registerRule = function (rule, style) {
        return this.registry.registerRule(rule, style);
    };
    StyleSheetRegistry.prototype.registerCss = function (style) {
        return this.registry.registerCss(style);
    };
    return StyleSheetRegistry;
}());
exports.StyleSheetRegistry = StyleSheetRegistry;
/**
 * Register a style sheet object with support for functions.
 */
function registerStyleSheet(Style, sheet, css, registeredName) {
    var styles = Object.create(null);
    var prefix = registeredName ? registeredName + "_" : '';
    var registry = new StyleSheetRegistry(Style, prefix);
    function toStyle(style) {
        return typeof style === 'function' ? style(registry) : style;
    }
    // Register style properties.
    if (typeof sheet === 'object') {
        for (var _i = 0, _a = Object.keys(sheet); _i < _a.length; _i++) {
            var key = _a[_i];
            styles[key] = Style.registerStyle(toStyle(sheet[key]));
        }
    }
    // Register global css when provided.
    if (typeof css === 'object')
        Style.registerCss(toStyle(css));
    return styles;
}
exports.registerStyleSheet = registerStyleSheet;
//# sourceMappingURL=index.js.map